digraph "top" {
  // Base Styling
  compound=true
  graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9"];

  // Start and end nodes
  reality[ label="Reality"  fontname="Arial"  fontsize="20"  fontcolor="white"  fillcolor="black"  color="black"  shape="box"  style="filled, rounded" ]
  attacker_wins[ label="ATTACKER WINS!"  fontname="Arial"  fontsize="20"  fontcolor="red"  fillcolor="yellow"  color="red"  shape="box"  style="filled, rounded" ]
  subgraph cluster_Database_Security {
    label=<<B>Database<br></br>Security</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_Database_Security_Policies {
      label=<<B>Database<br></br>Security Policies</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="black"  fillcolor="darkolivegreen3"  color="darkolivegreen3" ];
      Use_operationspecific_add_read_update_accounts_when_performing_db_operations[label="Use\noperation-specific (add, read,\nupdate) accounts when\nperforming db operations"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
      {rank="same"; }
    }
    SQL_queries_are_run_with_dbadmin_privileges[label="SQL queries are\nrun with db-admin\nprivileges"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    {rank="same"; }
  }
  reality -> Use_operationspecific_add_read_update_accounts_when_performing_db_operations
  reality -> SQL_queries_are_run_with_dbadmin_privileges
  Use_operationspecific_add_read_update_accounts_when_performing_db_operations -> attacker_wins[style="invis"]
  SQL_queries_are_run_with_dbadmin_privileges -> attacker_wins[style="invis"]
  subgraph cluster_TLS_security {
    label=<<B>TLS security</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Target_supports_TLS_v10_or_v11[label="Target supports\nTLS v1.0 or v1.1"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
    Exploit_insecure_TLS_ciphers[label="Exploit insecure\nTLS ciphers"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="red"  color="red"]
    Take_target_off_public_internet[label="Take target off\npublic internet"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="purple"  color="blue"]
    Turn_off_insecure_ciphers[label="Turn off insecure\nciphers"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="purple"  color="blue"]
    {rank="same"; Target_supports_TLS_v10_or_v11; Target_supports_TLS_v10_or_v11; }
  }
  Exploit_insecure_TLS_ciphers -> Take_target_off_public_internet
  Exploit_insecure_TLS_ciphers -> Turn_off_insecure_ciphers
  reality -> Target_supports_TLS_v10_or_v11
  Target_supports_TLS_v10_or_v11 -> Exploit_insecure_TLS_ciphers
  Target_supports_TLS_v10_or_v11 -> Turn_off_insecure_ciphers
  subgraph cluster_Request_service_to_add_a_new_user {
    label=<<B>Request service<br></br>to add a new user</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_Input_sanitization {
      label=<<B>Input<br></br>sanitization</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="black"  fillcolor="darkolivegreen3"  color="darkolivegreen3" ];
      Sanitize_SQL_content_from_request_parameters[label="Sanitize SQL\ncontent from request\nparameters"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
      {rank="same"; }
    }
    SQL_Injection_via_request_parameters[label="SQL Injection via\nrequest parameters"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    {rank="same"; }
  }
  reality -> Sanitize_SQL_content_from_request_parameters
  reality -> SQL_Injection_via_request_parameters
  Sanitize_SQL_content_from_request_parameters -> attacker_wins[style="invis"]
  SQL_Injection_via_request_parameters -> attacker_wins[style="invis"]
  subgraph cluster_Security_of_business_logic {
    label=<<B>Security of<br></br>business logic</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Service_runs_with_elevated_privileges_on_host[label="Service runs with\nelevated privileges on\nhost"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    Setup_container_or_VM_hosting_service_with_minimum_rights[label="Setup container\nor VM hosting\nservice with minimum\nrights"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
    {rank="same"; }
  }
  reality -> Service_runs_with_elevated_privileges_on_host
  reality -> Setup_container_or_VM_hosting_service_with_minimum_rights
  subgraph cluster_DB_Records_security {
    label=<<B>DB Records<br></br>security</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_Database_Security_Policies {
      label=<<B>Database<br></br>Security Policies</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="black"  fillcolor="darkolivegreen3"  color="darkolivegreen3" ];
      Never_allow_delete_operations[label="Never allow\ndelete operations"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
      {rank="same"; }
    }
    Unauthorized_delete_operation[label="Unauthorized\ndelete operation"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    {rank="same"; }
  }
  reality -> Never_allow_delete_operations
  reality -> Unauthorized_delete_operation
  Never_allow_delete_operations -> attacker_wins[style="invis"]
  Unauthorized_delete_operation -> attacker_wins[style="invis"]
  subgraph cluster_Prepare_and_add_new_records {
    label=<<B>Prepare and add<br></br>new records</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_Input_sanitization {
      label=<<B>Input<br></br>sanitization</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="black"  fillcolor="darkolivegreen3"  color="darkolivegreen3" ];
      Sanitize_SQL_content_from_input_strings[label="Sanitize SQL\ncontent from input\nstrings"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
      {rank="same"; }
    }
    SQL_Injection_via_input_strings[label="SQL Injection via\ninput strings"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    {rank="same"; }
  }
  reality -> Sanitize_SQL_content_from_input_strings
  reality -> SQL_Injection_via_input_strings
  Sanitize_SQL_content_from_input_strings -> attacker_wins[style="invis"]
  SQL_Injection_via_input_strings -> attacker_wins[style="invis"]
  subgraph cluster_Client_side_attacks {
    label=<<B>Client side<br></br>attacks</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Inject_javascript_into_client_webpage[label="Inject\njavascript into client\nwebpage"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="red"  color="red"]
    Sanitize_all_UI_input_fields[label="Sanitize all UI\ninput fields"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="purple"  color="blue"]
    Sanitize_all_URL_query_fields[label="Sanitize all URL\nquery fields"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
    webpage_has_string_fields[label="webpage has\nstring fields"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
    {rank="same"; webpage_has_string_fields; webpage_has_string_fields; }
  }
  reality -> webpage_has_string_fields
  reality -> Sanitize_all_URL_query_fields
  webpage_has_string_fields -> Inject_javascript_into_client_webpage
  webpage_has_string_fields -> Sanitize_all_UI_input_fields
  Inject_javascript_into_client_webpage -> Sanitize_all_UI_input_fields
  subgraph cluster_Records_access {
    label=<<B>Records access</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Request_for_bulk_user_data[label="Request for bulk\nuser data"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    Design_service_to_block_bulk_records_requests[label="Design service to\nblock bulk records\nrequests"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
    {rank="same"; }
  }
  reality -> Request_for_bulk_user_data
  reality -> Design_service_to_block_bulk_records_requests
  subgraph cluster_Frontend_security {
    label=<<B>Frontend<br></br>security</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_DoS_Protection {
      label=<<B>DoS Protection</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="white"  fillcolor="dimgray"  color="dimgray" ];
      rate_limiting_exists[label="rate limiting\nexists"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
      honeypots_exist_to_handle_excessive_malicious_requests[label="honeypots exist\nto handle excessive\nmalicious requests"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
      {rank="same"; rate_limiting_exists; honeypots_exist_to_handle_excessive_malicious_requests; }
    }
    Unauthorized_requests[label="Unauthorized\nrequests"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    {rank="same"; }
  }
  reality -> rate_limiting_exists[lhead=cluster_DoS_Protection]
  rate_limiting_exists -> Unauthorized_requests[ltail=cluster_DoS_Protection]
  Unauthorized_requests -> attacker_wins[style="invis"]
  subgraph cluster_Records_management {
    label=<<B>Records<br></br>management</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Unauthorized_modification_of_table[label="Unauthorized\nmodification of table"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    Restrict_the_tables_accessible_by_a_each_db_account_to_a_small_subset[label="Restrict the\ntables accessible by a\neach db account to a\nsmall subset"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
    {rank="same"; }
  }
  reality -> Unauthorized_modification_of_table
  reality -> Restrict_the_tables_accessible_by_a_each_db_account_to_a_small_subset
  subgraph cluster_CVE20213115__Go_RCE_using_PATH_variable_in_Windows {
    label=<<B>CVE-2021-3115 -<br></br>Go RCE using PATH<br></br>variable in Windows</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_All_Go_programs_use_cgo_package {
      label=<<B>All Go programs<br></br>use cgo package</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="white"  fillcolor="dimgray"  color="dimgray" ];
      cgo_is_a_standard_package[label="cgo is a standard\npackage"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
      cgo_is_used_in_all_core_packages_of_Go[label="cgo is used in all\ncore packages of Go"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
      Go_program_is_compiled_on_Windows[label="Go program is\ncompiled on Windows"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
      {rank="same"; cgo_is_a_standard_package; cgo_is_used_in_all_core_packages_of_Go; Go_program_is_compiled_on_Windows; }
    }
    Include_malicious_GCC_executable_in_C_module[label="Include\nmalicious GCC executable in\nC module"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="red"  color="red"]
    Run_newer_versions_of_Go_gteq_v11415_or_gteq_v1158[label="Run newer\nversions of Go (>= v1.14.15\nor >= v1.15.8)"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="purple"  color="blue"]
    {rank="same"; }
  }
  reality -> cgo_is_a_standard_package[lhead=cluster_All_Go_programs_use_cgo_package]
  cgo_is_used_in_all_core_packages_of_Go -> Include_malicious_GCC_executable_in_C_module[ltail=cluster_All_Go_programs_use_cgo_package]
  cgo_is_used_in_all_core_packages_of_Go -> Run_newer_versions_of_Go_gteq_v11415_or_gteq_v1158[ltail=cluster_All_Go_programs_use_cgo_package]
  Include_malicious_GCC_executable_in_C_module -> Run_newer_versions_of_Go_gteq_v11415_or_gteq_v1158
  Run_newer_versions_of_Go_gteq_v11415_or_gteq_v1158 -> attacker_wins[style="invis"]
  Run_newer_versions_of_Go_gteq_v11415_or_gteq_v1158 -> attacker_wins[style="invis"]
  cgo_is_a_standard_package -> attacker_wins[style="invis"]
  subgraph cluster_Data_Security {
    label=<<B>Data Security</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Force_deletion_of_sensitive_and_critical_data[label="Force deletion of\nsensitive and critical data"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="red"  color="red"]
    table_schema_has_a_status_column[label="table schema has a\n'status' column"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
    active_and_disabled_are_valid_values_for_status_column[label="'active' and\n'disabled' are valid values\nfor 'status' column"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
    Delete_requests_should_only_disable_a_record_not_delete_it[label="Delete requests\nshould only disable a\nrecord, not delete it"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="white"  fillcolor="purple"  color="blue"]
    {rank="same"; table_schema_has_a_status_column; active_and_disabled_are_valid_values_for_status_column; }
  }
  table_schema_has_a_status_column -> Delete_requests_should_only_disable_a_record_not_delete_it
  active_and_disabled_are_valid_values_for_status_column -> Delete_requests_should_only_disable_a_record_not_delete_it
  Force_deletion_of_sensitive_and_critical_data -> Delete_requests_should_only_disable_a_record_not_delete_it
  reality -> Force_deletion_of_sensitive_and_critical_data
  reality -> table_schema_has_a_status_column
  reality -> active_and_disabled_are_valid_values_for_status_column
  subgraph cluster_Client_data_requests {
    label=<<B>Client data<br></br>requests</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    Trigger_DoS_by_flooding_frontend_with_readrequests[label="Trigger DoS by\nflooding frontend with\nread-requests"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    Use_rate_limiting_to_control_resource_utilization_per_request[label="Use rate limiting\nto control resource\nutilization per request"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
    {rank="same"; }
  }
  reality -> Trigger_DoS_by_flooding_frontend_with_readrequests
  reality -> Use_rate_limiting_to_control_resource_utilization_per_request
  subgraph cluster_Add_record_to_Database {
    label=<<B>Add record to<br></br>Database</B>>
    graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Arial"  fontsize="24"  fontcolor="black"  fillcolor="transparent"  color="gray" ];
    subgraph cluster_Input_sanitization {
      label=<<B>Input<br></br>sanitization</B>>
      graph[style="filled, rounded" rankdir="LR" splines="true" overlap="false" nodesep="0.2" ranksep="0.9" fontname="Times"  fontsize="18"  fontcolor="black"  fillcolor="darkolivegreen3"  color="darkolivegreen3" ];
      Sanitize_SQL_content_before_building_query[label="Sanitize SQL\ncontent before building\nquery"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="blue"]
      {rank="same"; }
    }
    SQL_Injection_during_insert_operation[label="SQL Injection\nduring 'insert'\noperation"  shape="box3d"  style="filled, dashed"  margin="0.2"  fontname="Arial"  fontsize="16"  fontcolor="black"  fillcolor="transparent"  color="red"]
    {rank="same"; }
  }
  reality -> Sanitize_SQL_content_before_building_query
  reality -> SQL_Injection_during_insert_operation
  Sanitize_SQL_content_before_building_query -> attacker_wins[style="invis"]
  SQL_Injection_during_insert_operation -> attacker_wins[style="invis"]
  Force_deletion_of_sensitive_and_critical_data -> attacker_wins[ penwidth="4"  color="red" ]
  Inject_javascript_into_client_webpage -> attacker_wins[ penwidth="4"  color="red" ]
  subgraph cluster_Legend {
    label="Legend"
    graph[style="filled, rounded" rankdir="LR" fontsize="16" splines="true" overlap="false" nodesep="0.1" ranksep="0.2" fontname="Courier" fillcolor="lightyellow" color="yellow"];
    A[label="Pre-\nCondition"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="12"  fontcolor="black"  fillcolor="lightgray"  color="gray"]
    B[label="Assumptions"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="12"  fontcolor="white"  fillcolor="dimgray"  color="dimgray"]
    C[label="Attack"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="12"  fontcolor="white"  fillcolor="red"  color="red"]
    D[label="Pre-emptive\nDefense"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="12"  fontcolor="white"  fillcolor="purple"  color="blue"]
    E[label="Incident\nResponse"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="12"  fontcolor="white"  fillcolor="blue"  color="blue"]
    F[label="Policy"  shape="box"  style="filled, rounded"  margin="0.2"  fontname="Arial"  fontsize="12"  fontcolor="black"  fillcolor="darkolivegreen3"  color="darkolivegreen3"]
  }
  A -> reality [style="invis" ltail="cluster_Legend"]
  B -> reality [style="invis" ltail="cluster_Legend"]
  C -> reality [style="invis" ltail="cluster_Legend"]
  D -> reality [style="invis" ltail="cluster_Legend"]
  E -> reality [style="invis" ltail="cluster_Legend"]
  F -> reality [style="invis" ltail="cluster_Legend"]
}